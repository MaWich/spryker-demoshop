---

version: '3'

services:
  init:
    image: "${IMAGE}:${VERSION}"
    command: "init"
    restart: "no"
    depends_on:
      - zed
    links:
      - elasticsearch
      - database
      - jenkins
    env_file: ./docker-compose.env
    environment:
      - APPLICATION_ENV=production
      - ENABLE_OPCACHE=true
    volumes:
      - ./docker-compose-prod.d:/mnt/configs

  yves:
    image: "${IMAGE}:${VERSION}"
    build:
      context: ..
      args:
        - NETRC=$NETRC
    command: "run-yves"
    restart: always
    depends_on:
      - zed
    ports:
      - "10100:80"
    links:
      - zed
      - redis
      - elasticsearch
    env_file: ./docker-compose.env
    environment:
      - APPLICATION_ENV=production
      - ENABLE_OPCACHE=true
    volumes:
      - ./docker-compose-prod.d:/mnt/configs

  zed:
    image: "${IMAGE}:${VERSION}"
    build:
      context: ..
      args:
        - NETRC=$NETRC
    command: "run-zed"
    restart: always
    depends_on:
      - database
      - redis
      - elasticsearch
    ports:
      - "10200:80"
    links:
      - redis
      - elasticsearch
      - database
      - jenkins
    env_file: ./docker-compose.env
    environment:
      - APPLICATION_ENV=production
      - ENABLE_OPCACHE=true
    volumes:
      - ./docker-compose-prod.d:/mnt/configs

  redis:
    image: "bitnami/redis:4.0"
    env_file: ./docker-compose.env
    restart: always

  elasticsearch:
    image: "elasticsearch:2.4-alpine"
    restart: always
    depends_on:
      - database

  database:
    image: "postgres:9.6.3-alpine"
    restart: always
    env_file: ./docker-compose.env

  jenkins:
    image: "jenkins:alpine"
    ports:
      - "10300:8080"
    links:
      - database
      - elasticsearch
      - redis
    env_file: ./docker-compose.env

  jenkins-slave:
    image: "${IMAGE}:${VERSION}"
    command: "run-jenkins"
    depends_on:
      - jenkins
    links:
      - zed
      - redis
      - elasticsearch
      - database
      - jenkins
    env_file: ./docker-compose.env
    environment:
      - APPLICATION_ENV=production
    volumes:
      - ./docker-compose-devel.d:/mnt/configs
