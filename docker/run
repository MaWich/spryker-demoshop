#!/bin/bash
real_path() {
  file=$1
  local d=$(dirname $file)
  local b=$(basename $file)
  pushd $d >/dev/null; echo "$(pwd)/$b"; popd >/dev/null
}

real_path $0

WORKDIR=$(real_path $0 | xargs dirname | xargs dirname)
SCRIPT_PATH=$(real_path $0 | xargs dirname)
SCRIPT_DIRECTORY=$(basename $SCRIPT_PATH) # only the dir name for Dockerfile so we know what to copy
cd $WORKDIR

[ -e "$SCRIPT_PATH/project.conf.sh" ] && source "$SCRIPT_PATH/project.conf.sh"

SECRETS_FILE="$SCRIPT_PATH/.secrets.env"
SECRETS_FILE_TPL="$SCRIPT_PATH/secrets.env"

for cmd in docker-compose docker; do
  if ! which $cmd 2>&1 >/dev/null; then
    echo "ERROR: The command '$cmd' is required. Please install it!"
    exit 1
  fi
done


# Generate per user a secrets env file, if not already present
# this makes sure, each local setup gets it own passwords
# and it makes it easy to consume those generated passwords
# in scripts, as we export them via shell `export`
# docker-compose will propagate those env vars to its containers
generate_secrets_env() {
  if [ -e "$SECRETS_FILE" ]; then
    return 0
  fi

  echo "Save auto generated passwords in $SECRETS_FILE"
  (grep -v '^[[:space:]]*#' $SECRETS_FILE_TPL | while read line; do
   echo $line | grep -q '=$' && printf "%s%s\n" $line $(pw_gen) && continue
   echo $line
  done ) > $SECRETS_FILE
}

# Simulate pwgen: read arbitray number of characters from /dev/random, base64
# encode them and extract 16 chars
pw_gen() {
  for d in /dev/urandom /dev/random; do
    [ -e $d ] && base64 < $d | tr -dc _A-Z-a-z-0-9  | head -c 16 && echo "" && return
  done
  echo "ERROR: could not generate secrets, random devices not found!" >&2
  exit 1
}

configure_env_devel() {
  # VOLUMES: enable volumes in docker-compose dev env
  export ENV="dev" \
         APPLICATION_ENV=development \
         BASE_PORT=2 \
         VOLUMES="
    - ${WORKDIR}/assets:/app/assets
    - ${WORKDIR}/src/Pyz:/app/src/Pyz
    - ${WORKDIR}/composer.json:/app/composer.json
    - ${WORKDIR}/package.json:/app/package.json
    - ${WORKDIR}/tests:/app/tests
"
}

configure_env_prod() {
  export ENV="prod" \
         APPLICATION_ENV=production  \
         BASE_PORT=1 \
         VOLUMES="[]"
}

# Exec into container and run command
container_action() {
  target=$1
  echo "Entering Yves container ..."
  docker_compose exec yves-phpfpm /entrypoint.sh $target
  echo "Entering Zed container ..."
  docker_compose exec zed-phpfpm /entrypoint.sh $target
}


compose_get_spryker_services() {
  docker_compose config --services | egrep `(nginx|php|init)`
}

compose_recreate() {
  c=$1
  echo "\nRecreating $c container ..."
  docker_compose stop $c
  docker_compose rm -f $c
  docker_compose create $c
  docker_compose start $c
}


env_action() {
  action=$1; shift
  case $action in
    rebuild)
        echo "Going to rebuild shop images ..."
        build_images
        for c in $(compose_get_spryker_services); do
          compose_recreate $c
        done
        ;;
    recreate)
      if [ -n "$1" ]; then
          compose_recreate $1
      else
        for c in $(compose_get_spryker_services); do
          compose_recreate $c
        done
      fi
      ;;
    update-deps)
      echo "Updating dependencies in running container ..."
      container_action build deps
      ;;
    gen-code)
      echo "Generating shop code in running container ..."
      container_action build shop
      ;;
    enter)
      docker_compose exec $1 /bin/bash
      ;;
    ps|exec|up|down|pull|logs)
      docker_compose $action $*
      ;;
    compose)
      docker_compose $*
      ;;
    *)
      help
      ;;
  esac
}

docker_compose() {
  export IMAGE=$IMAGE VERSION=$VERSION
  generate_secrets_env
  source $SECRETS_FILE

  in=$SCRIPT_PATH/docker-compose.yml
  out=$SCRIPT_PATH/.docker-compose.yml

  perl -p -e 's/__VOLUMES__/$ENV{VOLUMES}/' < $in > $out
  echo "Executing: docker-compose -f $out -p ${PROJECT}_$ENV $*"
  docker-compose -f $out -p ${PROJECT}_$ENV $*
}

netrc() {
  if [ -e "$HOME/.netrc" ]; then
    echo "Using local ~/.netrc as credential provider"
    export NETRC=$(cat $HOME/.netrc)
    DOCKER_BUILD_ARGS="--build-arg NETRC $DOCKER_BUILD_ARGS"
  fi
}

build_images() {
  set -eo pipefail

  if [ -f "$WORKDIR/docker/dockerignore" ]; then
    cp "$WORKDIR/docker/dockerignore" $WORKDIR/.dockerignore
  fi
  netrc

  echo "Build spryker image"
  docker_build "$IMAGE:$VERSION" $*

  echo "Build spryker jenkins slave image"
  docker_build_jenkins "$IMAGE:$VERSION" $*

  if [ -f "$WORKDIR/docker/dockerignore" ]; then
    rm $WORKDIR/.dockerignore
  fi
}

# Build jenkins docker image derived from the one just being built.
docker_build_jenkins() {
  local image=$1; shift
  DF_JENKINS_GENERATED="$(mktemp)"
  local DF_JENKINS=$DOCKERFILE-jenkins
  if [ -e $DF_JENKINS ]; then
    echo "Using locally supplied Dockerfile for building jenkins: $DF_JENKINS"
    cat $DF_JENKINS > $DF_JENKINS_GENERATED
    perl -i -e 's/\$\{IMAGE\}/$ENV{"IMAGE"}/g' $DF_JENKINS_GENERATED
    perl -i -e 's/\$\{VERSION\}/$ENV{"VERSION"}/g' $DF_JENKINS_GENERATED
  else
    echo "No Dockerfile for jenkins given, creating one."
    cat > $DF_JENKINS_GENERATED <<EOF
FROM $IMAGE:$VERSION
RUN /entrypoint.sh build jenkins
EOF
  fi

  docker_build "${image}-jenkins" -f $DF_JENKINS_GENERATED $*
  rm $DF_JENKINS_GENERATED
}

docker_build() {
  local image=$1; shift
  set -x
  docker build $DOCKER_BUILD_ARGS -t $image -f $DOCKERFILE $* $WORKDIR
}

push_images() {
  set -exo pipefail

  echo "Push spryker image"
  docker push $* "$IMAGE:$VERSION"

  echo "Push spryker jenkins slave image"
  docker push $* "$IMAGE:$VERSION-jenkins"
}

help() {
    echo "
SYNOPSIS: Wrapper around docker and docker-compose while considering local configurations.

USAGE: $0 <cmd> | <env> <cmd> <args>

COMMANDS:

  Global:
    build [<args>]                    -- build docker image
    push  [<args>]                    -- push docker image

  Per Environment:
    prod|devel up [<args>]            -- Start spryker environment
    prod|devel down [<args>]          -- Stops spryker environment
    prod|devel rebuild                -- Rebuild shop image and recreate relevant containers
    prod|devel recreate init          -- Reinitializes the setup by recreating the init container
    prod|devel recreate [<svc>]       -- Just recreates running services
    prod|devel update-deps            -- Update dependency in running containers
    prod|devel gen-code               -- Generate code in running containers
    prod|devel enter <svc>            -- Exec into svc container and start /bin/sh
    prod|devel ps [<args>]            -- Show running services (same as: compose ps)
    prod|devel exec <svc> [<args>]    -- Exec into container (same as: compose exec)
    prod|devel logs <svc> [<args>]    -- Show logs of given service (same as: compose logs)
    prod|devel compose cmd <args>     -- Interface to docker-compose

EXAMPLES:

  - Start devel environment (builds containers unless existent locally):
      $0 prod up

  - Show running containers and their exposed ports
      $0 prod ps

  - Show and follow logs of particular container
      $0 prod logs -f init

  - Tear down devel environment incl. their data stores:
      $0 prod down -v

  - Rebuild and recreate spryker container
      $0 prod rebuild

  - Exec shell in container:
      $0 prod enter yves

  - Exec arbitrary command in container:
      $0 prod exec yves sleep 1m
"
}

case $1 in
  build|push)
    a=$1
    shift
    ${a}_images $*
    ;;
  prod|devel)
    configure_env_$1; shift
    env_action $*
    ;;
  *)
    help
esac
